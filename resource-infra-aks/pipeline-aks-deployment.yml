# Define Variables
variables:
  - group: difyaiab-global-resource-infra-aks
  - name: LIFECYCLE_ENVIRONMENT
    value: '$(ADO_DEV_ENVIRONMENT)'

# Stage to Deploy Terraform Backend Storage
stages:
  - stage: terraformBackendStorageDeployment
    # The stage displayName is not displayed in ADO but can be used for documentation purposes.
    displayName: 'Terraform Backend Storage Deployment'
    trigger: manual
    jobs:
      - deployment: terraformBackendStorageDeployment
        # The deployment displayName is displayed in ADO under Jobs.
        displayName: 'Terraform Backend Storage Deployment'
        pool:
          vmImage: 'ubuntu-latest'
        # This is the environment in ADO where the results of this job will be displayed.
        environment: difyaiab-global-resource-infra-aks
        strategy:
          runOnce:
            deploy:
              steps:
                # Azure CLI Login Step.
                - task: AzureCLI@2
                  # The step display name will be displayed in ADO in the DOS window in light green.
                  displayName: 'Azure CLI Login'
                  inputs:
                    azureSubscription: '$(AZURE_SERVICE_SPN)'
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      set -e  # Fail if any command fails
                      echo "Logging into Azure..."
                      az login --service-principal --username "$(AZURE_CLIENT_ID)" --password "$(AZURE_CLIENT_SECRET)" --tenant "$(AZURE_TENANT_ID)"
                      az account set --subscription "$(AZURE_SUBSCRIPTION_ID)"
                      az account show
                      echo "Azure login successful"
                # Show Logged In User.
                - task: AzureCLI@2
                  # The step display name will be displayed in ADO in the DOS window in light green.
                  displayName: 'Storage Account Creation'
                  inputs:
                    azureSubscription: '$(AZURE_SERVICE_SPN)'
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    ### ENV AND WORKLOAD TAGS FROM PIPELINE ### 1
                    ### NEED TO ADD CONTAINER REGISTRY### 2
                    ### NEED TO TIE CONTAINER REGIRSTRY TO AKS### 4
                    ### NEED TO ADD PLAN### 2
                    ### NEED TO ADD DEPLOY AND DESTROY### 2
                    ### NEED TO ADD INGRESS### 1
                    ### NEED TO ADD PROMETHEUS### 1
                    ### NEED TO ADD UPTIME-KUMA### .5
                    ### NEED TO ADD TRAEFIK-WHOAMI### 2
                    ### NEED TO ADD NGINX-HELLO### .5
                    ### NEED TO ADD BE#### 8
                    ### NEED TO ADD BE### 2
                    ### NEED TO ADD FE### 2
                    ### FIX ETCD###
                    ### FIX KUBEAPI###
                    ### SCRAPE METRICS FROM PODS###
                    ### KKUMA ALERTS###
                    ### PROM ALERTS###
                    ### GRAFANA ALERTS###
                    ### KUB UPDATES###
                    ### AUTOSCALE KEDA###
                    ### ISTIO###
                    ### GITOPS###
                    inlineScript: |
                      set -e  # Fail if any command fails
                      AZURE_ST_NAME="sttf$(AZURE_PROJECT_NAME)$(AZURE_PROJECT_INSTANCE)"
                      echo "Creating Storage Account $AZURE_ST_NAME..."
                      echo ""
                      if $(az storage account list | jq -r '.[]|.name' | grep -q $AZURE_ST_NAME); then 
                        echo "    Storage Account \"$AZURE_ST_NAME\" already exists."
                      else
                        # Create Storage Account
                        az storage account create --resource-group "$(AZURE_RG_NAME)" --name $AZURE_ST_NAME --sku Standard_LRS --encryption-services blob
                        # Create Storage Container
                        az storage container create --name tfstate --account-name $AZURE_ST_NAME --auth-mode login
                        # Code to Create Tags
                        cd "$(System.DefaultWorkingDirectory)/$(REPO_TFMANIFEST_FOLDER)"
                        # Get Storage Account ID
                        AZURE_ST_ID=$(az storage account show --name $AZURE_ST_NAME | jq -r '.id')
                        # Get Terraform Tags from variables.tf
                        AZURE_MANDATORY_TAGS=$(awk '/    # BEGIN ST TAGS/{f=1;next} /    # END ST TAGS/{f=0} f' 02-variables.tf | sed 's/"//g' | sed 's/ = /=/g')
                        # Add Tags with Pipeline Variables
                        AZURE_MANDATORY_TAGS="${AZURE_MANDATORY_TAGS} environment=$LIFECYCLE_ENVIRONMENT workload=$AZURE_PROJECT_NAME"
                        # Apply Tags to Storage Acccount
                        az tag create --resource-id $AZURE_ST_ID --tags $AZURE_MANDATORY_TAGS
                        echo "    Storage Account \"$AZURE_ST_NAME\" and Container \"tfstate\" created."
                      fi
                      echo ""
                      echo "Storage Account creation complete"

  - stage: terraformCodeValidation
    # The stage displayName is not displayed in ADO but can be used for documentation purposes.
    displayName: 'Terraform Code Validation'
    trigger: manual
    jobs:
      - deployment: terraformCodeValidation
        # The deployment displayName is displayed in ADO under Jobs.
        displayName: 'Terraform Code Validation'
        pool:
          vmImage: 'ubuntu-latest'
        # This is the environment in ADO where the results of this job will be displayed.
        environment: 'difyaiab-$(LIFECYCLE_ENVIRONMENT)-resource-infra-aks'
        strategy:
          runOnce:
            deploy:
              steps:
                # Checkout GitHub Repository
                - checkout: self
                  # dispalyName: 'Checkout GitHub Repository'
                # Azure CLI Login (Required for Terraform authentication)
                - task: AzureCLI@2
                  displayName: 'Azure CLI Login'
                  inputs:
                    azureSubscription: '$(AZURE_SERVICE_SPN)'
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      set -e  # Fail if any command fails
                      echo "Logging into Azure..."
                      az login --service-principal --username "$(AZURE_CLIENT_ID)" --password "$(AZURE_CLIENT_SECRET)" --tenant "$(AZURE_TENANT_ID)"
                      az account set --subscription "$(AZURE_SUBSCRIPTION_ID)"
                      az account show
                      # Debug Commands
                      # pwd
                      # echo '$(System.DefaultWorkingDirectory)/$(REPO_TFMANIFEST_FOLDER)'
                      # ls
                      echo "Azure login successful"
                - task: TerraformInstaller@1
                  displayName: 'Terrafrom Installer'
                  inputs:
                    terraformVersion: 'latest'
                - task: TerraformTaskV4@4
                  displayName: 'Terrafrom Init'
                  inputs:
                    provider: 'azurerm'
                    command: 'init'
                    workingDirectory: '$(System.DefaultWorkingDirectory)/$(REPO_TFMANIFEST_FOLDER)'
                    backendServiceArm: '$(AZURE_SERVICE_SPN)'
                    backendAzureRmResourceGroupName: '$(AZURE_RG_NAME)'
                    backendAzureRmStorageAccountName: 'sttf$(AZURE_PROJECT_NAME)$(AZURE_PROJECT_INSTANCE)'
                    backendAzureRmContainerName: 'tfstate'
                    backendAzureRmKey: 'aks-validate.tfstate'
                    allowTelemetryCollection: false
                - task: TerraformTaskV4@4
                  displayName: 'Terrafrom Validate'
                  inputs:
                    command: 'validate'
                    workingDirectory: '$(System.DefaultWorkingDirectory)/$(REPO_TFMANIFEST_FOLDER)'
                    allowTelemetryCollection: false

  - stage: terraformPlan
    # The stage displayName is not displayed in ADO but can be used for documentation purposes.
    displayName: 'Terraform Plan'
    trigger: manual
    jobs:
      - deployment: terraformPlan
        # The deployment displayName is displayed in ADO under Jobs.
        displayName: 'Terraform Plan'
        pool:
          vmImage: 'ubuntu-latest'
        # This is the environment in ADO where the results of this job will be displayed.
        environment: 'difyaiab-$(LIFECYCLE_ENVIRONMENT)-resource-infra-aks'
        strategy:
          runOnce:
            deploy:
              steps:
                # Checkout GitHub Repository
                - checkout: self
                  # dispalyName: 'Checkout GitHub Repository'
                # Azure CLI Login (Required for Terraform authentication)
                - task: AzureCLI@2
                  displayName: 'Azure CLI Login'
                  inputs:
                    azureSubscription: '$(AZURE_SERVICE_SPN)'
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      set -e  # Fail if any command fails
                      echo "Logging into Azure..."
                      az login --service-principal --username "$(AZURE_CLIENT_ID)" --password "$(AZURE_CLIENT_SECRET)" --tenant "$(AZURE_TENANT_ID)"
                      az account set --subscription "$(AZURE_SUBSCRIPTION_ID)"
                      az account show
                      echo "Azure login successful"
                - task: DownloadSecureFile@1
                  displayName: 'Download SSH Key'
                  name: sshkey
                  inputs:
                    secureFile: 'resource-infra-aks-linuxmaster-cert.pub'
                - task: TerraformInstaller@1
                  displayName: 'Terrafrom Installer'
                  inputs:
                    terraformVersion: 'latest'
                - task: TerraformTaskV4@4
                  displayName: 'Terrafrom Init'
                  inputs:
                    provider: 'azurerm'
                    command: 'init'
                    workingDirectory: '$(System.DefaultWorkingDirectory)/$(REPO_TFMANIFEST_FOLDER)'
                    backendServiceArm: '$(AZURE_SERVICE_SPN)'
                    backendAzureRmResourceGroupName: '$(AZURE_RG_NAME)'
                    backendAzureRmStorageAccountName: 'sttf$(AZURE_PROJECT_NAME)$(AZURE_PROJECT_INSTANCE)'
                    backendAzureRmContainerName: 'tfstate'
                    backendAzureRmKey: 'aks-$(LIFECYCLE_ENVIRONMENT).tfstate'
                    allowTelemetryCollection: false
                - task: TerraformTaskV4@4
                  inputs:
                    command: 'plan'
                    workingDirectory: '$(System.DefaultWorkingDirectory)/$(REPO_TFMANIFEST_FOLDER)'
                    backendServiceArm: '$(AZURE_SERVICE_SPN)'
                    environmentServiceNameAzureRM: '$(AZURE_SERVICE_SPN)'
                    commandOptions: '-var rg_name=$(AZURE_RG_NAME) -var environment=$(LIFECYCLE_ENVIRONMENT) -var project_name=$(AZURE_PROJECT_NAME) -var project_instance=$(AZURE_PROJECT_INSTANCE) -var ssh_public_key=$(sshkey.secureFilePath) -out $(System.DefaultWorkingDirectory)/$(REPO_TFMANIFEST_FOLDER)'
                    allowTelemetryCollection: false
                  displayName: 'Terrafrom Plan'

  - stage: backendInfrastructureDestruction
    # The stage displayName is not displayed in ADO but can be used for documentation purposes.
    displayName: 'Backend Infrastructure Destruction'
    trigger: manual
    jobs:
      - deployment: backendInfrastructureDestruction
        # The deployment displayName is displayed in ADO under Jobs.
        displayName: 'Backend Infrastructure Destruction'
        pool:
          vmImage: 'ubuntu-latest'
        # This is the environment in ADO where the results of this job will be displayed.
        environment: difyaiab-global-resource-infra-aks
        strategy:
          runOnce:
            deploy:
              steps:
                # Azure CLI Login Step.
                - task: AzureCLI@2
                  # The step display name will be displayed in ADO in the DOS window in light green.
                  displayName: 'Azure CLI Login'
                  inputs:
                    azureSubscription: 'global-azdo-spn'
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      set -e  # Fail if any command fails
                      echo "Logging into Azure..."
                      az login --service-principal --username "$(AZURE_CLIENT_ID)" --password "$(AZURE_CLIENT_SECRET)" --tenant "$(AZURE_TENANT_ID)"
                      az account set --subscription "$(AZURE_SUBSCRIPTION_ID)"
                      az account show
                      echo "Azure login successful"
                # Show Logged In User.
                - task: AzureCLI@2
                  # The step display name will be displayed in ADO in the DOS window in light green.
                  displayName: 'Storage Account Deletion'
                  inputs:
                    azureSubscription: 'global-azdo-spn'
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      set -e  # Fail if any command fails
                      AZURE_ST_NAME="sttf$(AZURE_PROJECT_NAME)$(AZURE_PROJECT_INSTANCE)"
                      echo "Deleting Storage Account $AZURE_ST_NAME..."
                      echo ""
                      if $(az storage account list | jq -r '.[]|.name' | grep -q $AZURE_ST_NAME); then
                        az storage account delete --name $AZURE_ST_NAME -g "$(AZURE_RG_NAME)" --yes
                        echo "    Storage Account \"$AZURE_ST_NAME\" deleted."
                      else
                        echo "    Storage Account \"$AZURE_ST_NAME\" does not exist."
                      fi
                      echo ""
                      echo "Storage Account deletion complete"
