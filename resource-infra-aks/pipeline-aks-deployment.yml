# Define Variables
variables:
  - group: difyaiab-global-resource-infra-aks
  - name: LIFECYCLE_ENVIRONMENT
    value: $(DEV_ENVIRONMENT)

# Stage to Deploy Terraform Backend Storage
stages:
  - stage: terraformBackendStorageDeployment
    # The stage displayName is not displayed in ADO but can be used for documentation purposes.
    displayName: 'Terraform Backend Storage Deployment'
    #trigger: manual
    jobs:
      - deployment: terraformBackendStorageDeployment
        # The deployment displayName is displayed in ADO under Jobs.
        displayName: 'Terraform Backend Storage Deployment'
        pool:
          vmImage: 'ubuntu-latest'
        # This is the environment in ADO where the results of this job will be displayed.
        environment: difyaiab-global-resource-infra-aks
        strategy:
          runOnce:
            deploy:
              steps:
                # Azure CLI Login Step.
                - task: AzureCLI@2
                  # The step display name will be displayed in ADO in the DOS window in light green.
                  displayName: 'Azure CLI Login'
                  inputs:
                    azureSubscription: 'global-azdo-spn'
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      set -e  # Fail if any command fails
                      echo "Logging into Azure..."
                      az login --service-principal --username "$(AZURE_CLIENT_ID)" --password "$(AZURE_CLIENT_SECRET)" --tenant "$(AZURE_TENANT_ID)"
                      az account set --subscription "$(AZURE_SUBSCRIPTION_ID)"
                      az account show
                      echo "Azure login successful"
                # Show Logged In User.
                - task: AzureCLI@2
                  # The step display name will be displayed in ADO in the DOS window in light green.
                  displayName: 'Storage Account Creation'
                  inputs:
                    azureSubscription: 'global-azdo-spn'
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      set -e  # Fail if any command fails
                      echo "Creating Storage Account..."
                      echo ""
                      echo "    Getting Resource Group Location..."
                      AZURE_RG_LOCATION=$(az group show --name "$(AZURE_RG_NAME)" | jq -r '.location')
                      echo "    Resource group location: $AZURE_RG_LOCATION"
                      echo ""
                      AZURE_ST_NAME="strg$(AZURE_PROJECT_NAME)$(AZURE_PROJECT_INSTANCE)"
                      echo "    Creating Storage Account $AZURE_ST_NAME..."
                      if $(az storage account list | jq -r '.[]|.name' | grep -q $AZURE_ST_NAME); then 
                        echo '    Storage Account "$AZURE_ST_NAME" already exists.'
                      else
                        az storage account create --resource-group "$(AZURE_RG_NAME)" --name $AZURE_ST_NAME --sku Standard_LRS --encryption-services blob
                        az storage container create --name tfstate --account-name $AZURE_ST_NAME
                        echo '    Storage Account "$AZURE_ST_NAME" and Container "tfstate" created.'
                      fi
                      echo ""
                      echo "Storage Account creation complete"
